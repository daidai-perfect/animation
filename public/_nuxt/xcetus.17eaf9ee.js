import{u as p,p as u,c as v,a1 as S,s as x,a2 as b,e as m}from"./pool.04cdd6ce.js";import{u as d}from"./useWhale.eae2d737.js";import{a6 as L}from"./entry.7427f084.js";import{D as l}from"./decimal.0bdeb344.js";const I=L("xcetus",{state:()=>({venft_id:"",xWhaleBalance:"--",venftInfo:{},pendingAmount:"--",newPendingAmount:"--",whaleBalance:"--",ownerLocks:[],availableXwhale:"--",redeemingXwhale:"--",nextStartTime:"",xcetusShare:"--",pendingCoinInfo:{},newPendingCoinInfo:{},cetusApr:"",claimLoading:"",dividendManagerInfo:{},rewardCoin:{},rewardCoinAmount:"--",xcetusRewardList:[]}),getters:{getPoolStore(){return p()}},actions:{async getOwnerVeNFT(n){const t=d("Sui");try{const e=await t.getOwnerVeNFT(n);console.log(e,"===>result"),e?(this.venft_id=e.id,this.xWhaleBalance=u(e.xcetus_balance,9),this.venftInfo={id:e.id,type:e.type,index:e.index,xcetus_balance:e.xcetus_balance},this.getVeNFTDividendInfo()):(this.xWhaleBalance="0",this.availableXwhale="0",this.redeemingXwhale="0",this.pendingAmount="0",this.newPendingAmount="0")}catch{this.xWhaleBalance="--",this.availableXwhale="--",this.redeemingXwhale="--",this.pendingAmount="--",this.newPendingAmount="--"}},async getVeNFTDividendInfo(){const n=d("Sui"),t=v("Sui");try{const e=await n.getVeNFTDividendInfo(this.venft_id,this.dividendManagerInfo),o=await n.getPeriod(this.dividendManagerInfo),r=await t.getTokenList();console.log(o,"===>period"),console.log(e,"===>result");const c=[];if(e&&e.rewards&&e.rewards.length>0){for(let i=0;i<e.rewards.length;i++)if(e.rewards[i].period<o){const h=e.rewards[i].rewards;for(let s=0;s<h.length;s++){const a=h[s];Number(a.amount)>0&&c.push({...a})}}if(c&&c.length>0){const i={};for(let s=0;s<c.length;s++){const a=c[s];if(i[a.coin_type])i[a.coin_type].amount=new l(i[a.coin_type].amount).add(new l(a.amount)).toString();else{let w=r.filter(g=>S(g.address,a.coin_type))[0];w||(w=(await t.getTokenListByCoinType([a.coin_type]))[0]),i[a.coin_type]={...a,...w}}}const h=Object.values(i).map(s=>({...s,amount:x(u(s.amount,s.decimals),6)}));this.xcetusRewardList=h,console.log(h,"===>rewardArr")}else this.xcetusRewardList=[]}else this.xcetusRewardList=[]}catch{this.xcetusRewardList=[]}},async getDividendManager(){const t=await d("Sui").getDividendManager();this.nextStartTime=t.nextStartTime,this.dividendManagerInfo=t,this.getVeNFTDividendInfo()},async getAccountWhaleBalance(n){const e=await d("Sui").getOwnerCetusCoins(n);if(console.log(e,"==>assets"),e&&e.length>0){let o=new l(0);e.forEach(r=>{console.log(u(r.balance.toString(),9),"===>prettyAmount(ele.balance.toString(), 9)"),o=o.add(u(r.balance.toString(),9))}),console.log(this.whaleBalance,"===>this.whaleBalance"),this.whaleBalance=o}else this.whaleBalance="0"},async getOwnerLockCetuss(n){const e=await d("Sui").getOwnerLockCetuss(n);console.log(e,"assets===>");const o=e.sort((r,c)=>r.locked_until_time-c.locked_until_time);this.ownerLocks=o,console.log(this.ownerLocks,"===>this.ownerLocks"),this.setClaimLoading(""),this.getAvailableXCetus()},async getAvailableXCetus(){const n=d("Sui");console.log(this.ownerLocks,"==>this.ownerLocks");const t=await n.getAvailableXCetus(this.venftInfo,this.ownerLocks);console.log(t,"==>result1111"),console.log(this.ownerLocks&&this.ownerLocks.length==0,this.venftInfo,"##this.ownerLocks&&this.ownerLocks.length== 0"),this.availableXwhale=this.ownerLocks&&this.ownerLocks.length==0?u(this.venftInfo.xcetus_balance,9):u(t,9),console.log(this.xWhaleBalance,"===>this.xWhaleBalance"),console.log(this.availableXwhale,"===>this.availableXwhale"),this.redeemingXwhale=this.xWhaleBalance!=="--"?new l(this.xWhaleBalance).sub(new l(this.availableXwhale)).toString():"0"},async getMyShare(n){const t=d("Sui");try{const e=await t.getMyShare(n);e?(this.xcetusShare=Number(e)>0&&Number(e)<.01?"<0.01":e,console.log(e,"result===>124")):this.xcetusShare="0"}catch(e){console.log(e,"e===>"),this.xcetusShare=""}},async getXcetusApr(){try{const n=d("Sui"),t=await n.getPhaseDividendInfo(this.dividendManagerInfo);if(t&&t.bonus&&t.bonus.length>0){const{tokensObj:e,RATES:o}=this.getPoolStore;let r=new l(0);console.log(t,"##phaseDividendInfo.bonus"),t.bonus.forEach(s=>{console.log(s,"##bonu");const a=s.name=="0000000000000000000000000000000000000000000000000000000000000002::sui::SUI"?"0x2::sui::SUI":b(s.name,!1);console.log(e,e[a],a,"##tokensObj[tokenAddress]");const w=e[a].decimals,g=o[a].price,f=new l(s.value).mul(new l(g)).div(new l(Math.pow(10,w)));r=r.add(f),console.log(r.toString(),"totalBonusAmount.toString()")});const{treasury:c}=await n.getXcetusManager(),i=o[m.Sui.xcetusTokenAddress].price,h=r.div(7).mul(365).div(new l(c).mul(i).div(Math.pow(10,9))).toNumber()*100;this.cetusApr=Number(h)>0&&Number(h)<.01?"<0.01":h}}catch(n){console.log("getXcetusApr error",n);const{data:t}=await fetch(`${m.Sui.api}/v2/sui/storm/dividend_rewards`).then(o=>o.json()),e=t.apr&&t.apr.replace("%","");this.cetusApr=Number(e)>0&&Number(e)<.01?"<0.01":e}},loginOut(){this.venft_id="",this.xWhaleBalance="--",this.venftInfo={},this.pendingAmount="--",this.whaleBalance="--",this.ownerLocks=[],this.availableXwhale="--",this.redeemingXwhale="--",this.xcetusShare="--",this.xcetusRewardList=[]},setClaimLoading(n){this.claimLoading=n}}});export{I as u};
